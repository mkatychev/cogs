 # every cog manifest should have a name key that corresponds to a string
name = "basic example"

# key value pairs for a context/ctx are defined under <ctx>.vars
# try running `cogs gen ./examples/1.basic.cog.toml basic` to see what output
# cogs generates
[basic.vars]
var = "var_value"
other_var = "other_var_value"

# if <var>.path is given a string value,
# cogs will look for the key name of <var> in the file that that corresponds to
# the <var>.path key,
# returning the corresponding value
manifest_var.path = "../test_files/manifest.yaml"
# try removing manifest_var from "./test_files/manifest.yaml" and see what happens

# some variables can set an explicit key name to look for instead of defaulting
# to look for the key name "<var>":
# if <var>.name is defined then cogs will look for a key name that matches <var>.name
look_for_manifest_var.path = "../test_files/manifest.yaml"
look_for_manifest_var.name = "manifest_var"

# dangling variable names should return an error
# uncomment the line below and run `cogs gen ./examples/1.basic.cog.toml basic`:
# ---
# empty_var.name = "some_name"
# ---


# `cogs gen ./examples/1.basic.cog.toml basic extra` merges any number of
# contexts together, elements with a duplicate key name return an error.
#
# When outputting to dotnev via `--output=dotenv`, `lowerCamelCase`,
# `CamelCase`, and `snake_case` key names are converted to
# `SCREAMING_SNAKE_CASE`.
#
# try running `cogs gen ./examples/1.basic.cog.toml basic extra --out=dotenv`
# and see what happens :)
[extra.vars]
OtherVar = "OtherVarValue"
