name = "secrets example"

# the "sops" context shows how paths can be inherited and how encrypted variables are searched for

# try running `cogs gen secrets.cog.toml sops --no-decrypt` to see what encrypted values
# look like before being dectyped

# now run `cogs gen secrets.cog.toml sops` to see decrypted values combined with plaintext files
[sops]
# a default path to be inherited can be defined under <ctx>.path

# Yq is used to resolve "object paths" (the path taken inside of a file)
# install yq using the instructions here: https://github.com/mikefarah/yq#install

# Once installed, try running the yq command below to see how the path property is used:
# `yq eval '.subpath' ./test_files/manifest.yaml`
path = ["../test_files/manifest.yaml", ".subpath"]
[sops.vars]
# a <var>.path key can map to four valid types:
# 1. path value is "string_value" - indicating a single file to look through
# 2. path value is [] - thus <ctx>.path will be inherited
# 3. path value is a ["two_index, "array"] - either index being [] or "string_value":
# -  [[], "subpath"] - path will be inherited from <ctx>.path if present
# -  ["filepath", []] - subpath will be inherited from <ctx>.path if present
# 4. ["filepath", "subpath"] - nothing will be inherited
var1.path = ["../test_files/manifest.yaml", ".subpath"]
var2.path = []
var3.path = [[], ".other_subpath"]


# key value pairs for an encrypted context are defined under <ctx>.enc.vars
# variables in <ctx>.enc.vars are assumed to be sops encrypted and require a KMS keychain
# or GPG key to decrypt, otherwise the key/value lookup logic is the same as plaintext values
[sops.enc.vars]
yaml_enc.path = "../test_files/test.enc.yaml"
dotenv_enc = {path = "../test_files/test.enc.env", name = "DOTENV_ENC"}
json_enc.path = "../test_files/test.enc.json"
